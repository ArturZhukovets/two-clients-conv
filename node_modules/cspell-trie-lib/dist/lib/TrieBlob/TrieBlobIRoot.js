import { Utf8Accumulator } from './Utf8.js';
export class TrieBlobInternals {
    nodes;
    charIndex;
    NodeMaskEOW;
    NodeMaskNumChildren;
    NodeMaskChildCharIndex;
    NodeChildRefShift;
    isIndexDecoderNeeded;
    constructor(nodes, charIndex, maskInfo) {
        this.nodes = nodes;
        this.charIndex = charIndex;
        const { NodeMaskEOW, NodeMaskChildCharIndex, NodeMaskNumChildren, NodeChildRefShift } = maskInfo;
        this.NodeMaskEOW = NodeMaskEOW;
        this.NodeMaskNumChildren = NodeMaskNumChildren;
        this.NodeMaskChildCharIndex = NodeMaskChildCharIndex;
        this.NodeChildRefShift = NodeChildRefShift;
        this.isIndexDecoderNeeded = charIndex.indexContainsMultiByteChars();
    }
}
const EmptyKeys = Object.freeze([]);
const EmptyNodes = Object.freeze([]);
const EmptyEntries = Object.freeze([]);
class TrieBlobINode {
    trie;
    nodeIdx;
    id;
    node;
    eow;
    _keys;
    _count;
    _size;
    _chained;
    _nodesEntries;
    _entries;
    _values;
    charToIdx;
    constructor(trie, nodeIdx) {
        this.trie = trie;
        this.nodeIdx = nodeIdx;
        const node = trie.nodes[nodeIdx];
        this.node = node;
        this.eow = !!(node & trie.NodeMaskEOW);
        this._count = node & trie.NodeMaskNumChildren;
        this.id = nodeIdx;
    }
    /** get keys to children */
    keys() {
        if (this._keys)
            return this._keys;
        if (!this._count)
            return EmptyKeys;
        this._keys = this.getNodesEntries().map(([key]) => key);
        return this._keys;
    }
    values() {
        if (!this._count)
            return EmptyNodes;
        if (this._values)
            return this._values;
        this._values = this.entries().map(([, value]) => value);
        return this._values;
    }
    entries() {
        if (this._entries)
            return this._entries;
        if (!this._count)
            return EmptyEntries;
        const entries = this.getNodesEntries();
        this._entries = entries.map(([key, value]) => [key, new TrieBlobINode(this.trie, value)]);
        return this._entries;
    }
    /** get child ITrieNode */
    get(char) {
        const idx = this.getCharToIdxMap()[char];
        if (idx === undefined)
            return undefined;
        return this.child(idx);
    }
    has(char) {
        const idx = this.getCharToIdxMap()[char];
        return idx !== undefined;
    }
    hasChildren() {
        return this._count > 0;
    }
    child(keyIdx) {
        if (!this._values && !this.containsChainedIndexes()) {
            const n = this.trie.nodes[this.nodeIdx + keyIdx + 1];
            const nodeIdx = n >>> this.trie.NodeChildRefShift;
            return new TrieBlobINode(this.trie, nodeIdx);
        }
        return this.values()[keyIdx];
    }
    getCharToIdxMap() {
        const m = this.charToIdx;
        if (m)
            return m;
        const map = Object.create(null);
        const keys = this.keys();
        for (let i = 0; i < keys.length; ++i) {
            map[keys[i]] = i;
        }
        this.charToIdx = map;
        return map;
    }
    containsChainedIndexes() {
        if (this._chained !== undefined)
            return this._chained;
        if (!this._count || !this.trie.isIndexDecoderNeeded) {
            this._chained = false;
            return false;
        }
        // scan the node to see if there are encoded entries.
        let found = false;
        const NodeMaskChildCharIndex = this.trie.NodeMaskChildCharIndex;
        const offset = this.nodeIdx + 1;
        const nodes = this.trie.nodes;
        const len = this._count;
        for (let i = 0; i < len && !found; ++i) {
            const entry = nodes[i + offset];
            const charIdx = entry & NodeMaskChildCharIndex;
            found = Utf8Accumulator.isMultiByte(charIdx);
        }
        this._chained = !!found;
        return this._chained;
    }
    getNodesEntries() {
        if (this._nodesEntries)
            return this._nodesEntries;
        if (!this.containsChainedIndexes()) {
            const entries = Array(this._count);
            const nodes = this.trie.nodes;
            const offset = this.nodeIdx + 1;
            const NodeMaskChildCharIndex = this.trie.NodeMaskChildCharIndex;
            const RefShift = this.trie.NodeChildRefShift;
            for (let i = 0; i < this._count; ++i) {
                const entry = nodes[offset + i];
                const codePoint = entry & NodeMaskChildCharIndex;
                entries[i] = [String.fromCodePoint(codePoint), entry >>> RefShift];
            }
            this._nodesEntries = entries;
            return entries;
        }
        this._nodesEntries = this.walkChainedIndexes();
        return this._nodesEntries;
    }
    walkChainedIndexes() {
        const NodeMaskChildCharIndex = this.trie.NodeMaskChildCharIndex;
        const NodeChildRefShift = this.trie.NodeChildRefShift;
        const NodeMaskNumChildren = this.trie.NodeMaskNumChildren;
        const nodes = this.trie.nodes;
        const acc = Utf8Accumulator.create();
        const stack = [{ nodeIdx: this.nodeIdx + 1, lastIdx: this.nodeIdx + this._count, acc }];
        let depth = 0;
        const entries = Array(this._count);
        let eIdx = 0;
        while (depth >= 0) {
            const s = stack[depth];
            const { nodeIdx, lastIdx } = s;
            if (nodeIdx > lastIdx) {
                --depth;
                continue;
            }
            ++s.nodeIdx;
            const entry = nodes[nodeIdx];
            const charIdx = entry & NodeMaskChildCharIndex;
            const acc = s.acc.clone();
            const codePoint = acc.decode(charIdx);
            if (codePoint !== undefined) {
                const char = String.fromCodePoint(codePoint);
                const nodeIdx = entry >>> NodeChildRefShift;
                entries[eIdx++] = [char, nodeIdx];
                continue;
            }
            const idx = entry >>> NodeChildRefShift;
            const lIdx = idx + (nodes[idx] & NodeMaskNumChildren);
            const ss = stack[++depth];
            if (ss) {
                ss.nodeIdx = idx + 1;
                ss.lastIdx = lIdx;
                ss.acc = acc;
            }
            else {
                stack[depth] = { nodeIdx: idx + 1, lastIdx: lIdx, acc };
            }
        }
        return entries;
    }
    get size() {
        if (this._size === undefined) {
            if (!this.containsChainedIndexes()) {
                this._size = this._count;
                return this._size;
            }
            this._size = this.getNodesEntries().length;
        }
        return this._size;
    }
}
export class TrieBlobIRoot extends TrieBlobINode {
    info;
    find;
    findExact;
    isForbidden;
    constructor(trie, nodeIdx, info, methods) {
        super(trie, nodeIdx);
        this.info = info;
        this.find = methods?.find;
        this.findExact = methods?.findExact;
        this.isForbidden = methods?.isForbidden;
    }
    resolveId(id) {
        return new TrieBlobINode(this.trie, id);
    }
}
//# sourceMappingURL=TrieBlobIRoot.js.map